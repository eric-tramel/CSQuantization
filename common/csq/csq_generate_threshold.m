function thresh = csq_generate_threshold(params)
% thresh = csq_generate_threshold(params)
% Generate a function handle which implements the chosen
% thresholding strategy.
csq_required_parameters(params,'threshold');
csq_required_parameters(params.threshold,'id');

if ~isfield(params.threshold,'windowsize')
  params.threshold.windowsize = 3;
end

switch params.threshold.id
  case 'soft'
    csq_required_parameters(params,'imsize');
    csq_required_parameters(params.threshold,'lambda');
    thresh = @(x) soft_threshold(x, ...
                                 params.threshold.lambda, ...
                                 params.imsize(1), ...
                                 params.imsize(2));

  case 'hard'
    csq_required_parameters(params,'imsize');
    csq_required_parameters(params.threshold,'lambda');
    thresh = @(x) hard_threshold(x, ...
                                 params.threshold.lambda, ...
                                 params.imsize(1), ...
                                 params.imsize(2));

  case 'top'
    csq_required_parameters(params.threshold,'k');
    thresh = @(x) top_k(x,params.threshold.k);

  case 'bivariate-shrinkage'
    csq_required_parameters(params,'imsize','transform');
    csq_required_parameters(params.transform,'L');
    csq_required_parameters(params.threshold,'end_level','windowsize','lambda');
    thresh = @(x) csq_dwt_cell2vec(bivariate_shrinkage(csq_dwt_vec2cell(x,...
      params.imsize(1), ...
      params.imsize(2), ...
      params.transform.L), ...
      params.threshold.lambda,...
      params.threshold.windowsize,...
      params.threshold.end_level));

  case 'bivariate-shrinkage-final'
    csq_required_parameters(params,'imsize','transform');
    csq_required_parameters(params.transform,'L');
    csq_required_parameters(params.threshold,'end_level','windowsize','lambda');
    thresh = @(x) csq_dwt_cell2vec(bivariate_shrinkage(csq_dwt_vec2cell(x,...
      params.imsize(1), ...
      params.imsize(2), ...
      params.transform.L), ...
      params.threshold.lambda,...
      params.threshold.windowsize,...
      1));  

  case 'ddwt-bs'
    csq_required_parameters(params,'imsize','transform');
    csq_required_parameters(params.transform,'L');
    csq_required_parameters(params.threshold,'end_level','windowsize','lambda');
    thresh = @(x) csq_ddwt_cell2vec(bivariate_shrinkage(csq_ddwt_vec2cell(x,...
      params.imsize(1), ...
      params.imsize(2), ...
      params.transform.L), ...
      params.threshold.lambda,...
      params.threshold.windowsize,...
      params.threshold.end_level));

  case 'ddwt-bs-final'
    csq_required_parameters(params,'imsize','transform');
    csq_required_parameters(params.transform,'L');
    csq_required_parameters(params.threshold,'end_level','windowsize','lambda');
    thresh = @(x) csq_ddwt_cell2vec(bivariate_shrinkage(csq_ddwt_vec2cell(x,...
      params.imsize(1), ...
      params.imsize(2), ...
      params.transform.L), ...
      params.threshold.lambda,...
      params.threshold.windowsize,...
      1));    
    
    
  otherwise
    return_str = sprintf('Threshold "%s" is unsupported.',params.threshold.id);
    error('csq_generate_threshold:UnsupportedTransform',return_str);
end